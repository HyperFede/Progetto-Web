name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm

      # Install any deps in the root (if you have a package.json there)
      - name: Install root dependencies
        run: npm ci

      # All backend commands run inside the `backend` folder:
      - name: Install & Test Backend
        working-directory: backend
        env:
          # Ensure your init and test logic picks up the right environment:
          NODE_ENV: test
          PGHOST:     localhost
          PGPORT:     5432
          PGUSER:     testuser
          PGPASSWORD: testpass
          PGDATABASE: testdb
        run: |
          # 1) Install your backend's deps
          npm install
          # 2) Initialize the test database
          node src/config/init-db.js
          # 3) Run the real Jest tests
          npm test

  deploy:
    name: Dummy Deploy
    needs: test-backend
    runs-on: ubuntu-latest
    if: ${{ needs.test-backend.result == 'success' }}
    steps:
      - name: Deploy placeholder
        run: echo "→ Here you would SSH, push a Docker image, or call a cloud‐provider action."
